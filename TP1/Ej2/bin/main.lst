     1                                  %define	ROM_START_ADDRESS 0xFFF0
     2                                  
     3                                  use16
     4                                  inicio:
     5 00000000 90<rept>                	times 0x0030 nop
     6                                  main:
     7 00000030 B800F0                  	mov ax,0xf000
     8 00000033 8ED8                    	mov ds,ax
     9 00000035 8EC0                    	mov es,ax
    10 00000037 666A26                  	push dword 0x26		; lo que ocupa td3_memcopy (num bytes)
    11 0000003A 6668[59000000]          	push dword td3_memcopy	; direccion origen
    12                                  ;	push dword 0x00000	; direccion destino (primer caso)
    13 00000040 666800000F00            	push dword 0xf0000	; direccion destino (segundo caso)
    14                                  
    15                                  
    16 00000046 66E80D000000            	call dword td3_memcopy
    17                                  	
    18 0000004C 66678B642408            	mov esp, [esp+8]
    19                                  loop:
    20 00000052 90                      	nop
    21 00000053 66E9F9FFFFFF            	jmp dword loop		; para que haga un loop infinito
    22                                  
    23                                  td3_memcopy:
    24                                  ; pusheo los registros que voy a utilizar, y limpio los flags de interrupcion y direccion
    25                                  
    26 00000059 6655                    	push ebp		; al entrar en la funcion guardo ebp
    27 0000005B 6689E5                  	mov ebp, esp		; y lo apunto a la pila
    28                                  
    29 0000005E 6651                            push ecx
    30 00000060 6657                            push edi
    31 00000062 6656                            push esi
    32 00000064 FC                              cld                     ; pongo flag de direccion en 0
    33                                  
    34                                  
    35                                  ; realizo la copia
    36                                  
    37 00000065 66678B7D08              	mov dword edi, [ebp+8]	; edi contiene la direccion del primer argumento
    38 0000006A 66678B750C                      mov dword esi, [ebp+12]	; esi contiene la del segundo argumento
    39 0000006F 66678B4D10                      mov dword ecx, [ebp+16]	; ecx se carga con el tercer argumento
    40 00000074 F2A4                            repnz movsb		; repnz: REPeat Not Zero.
    41                                                                  ; movsb:
    42                                                                  ;       [es:edi] <- [ds:esi]
    43                                                                  ;       edi++, esi++ (si direction flag esta en 0)
    44                                  				; 	edi--, esi-- (si direction flag esta en 1)
    45                                                                  ;       ecx--
    46                                  ; popeo y retorno
    47 00000076 665E                            pop esi
    48 00000078 665F                            pop edi
    49 0000007A 6659                            pop ecx
    50 0000007C 665D                    	pop ebp
    51 0000007E C3                      	ret
    52                                  
    53                                  ; inicializo la ROM y salto al inicio
    54                                  
    55                                  ROM:
    56 0000007F 00                              db 0x0                  ; define un byte que contiene 0x0
    57                                  	%define CODESIZE ($-inicio)
    58                                  				; para obtener la cantidad de bytes que hay desde aca hasta el inicio
    59                                  	%define CODE ROM_START_ADDRESS-CODESIZE
    60                                  				; obtiene la cantidad de bytes a reservar para que cli este en FFF0
    61 00000080 90<rept>                        times CODE nop        	; reserva los bytes necesarios
    62 0000FFF0 FA                              cli                     ; limpio los flags de interrupcion
    63 0000FFF1 EA[3000]00F0            	jmp 0xf000:main		; para aclarar que es jmpf, sino aparece
    64                                  				; word data exceeds bounds [-w+number-overflow]
    65                                  
    66 0000FFF6 90<rept>                	align 16
    67                                  
